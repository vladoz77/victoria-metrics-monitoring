# Основные параметры развертывания
replicaCount: 3                     # Количество реплик VMAgent
mode: statefulSet                   # Режим развертывания (StatefulSet вместо Deployment)

# Конфигурация StatefulSet
statefulSet:
  clusterMode: true                 # Включение кластерного режима работы
  replicationFactor: 1              # Фактор репликации данных между экземплярами

# Настройки именования
nameOverride: vmagent               # Переопределение базового имени ресурсов
fullnameOverride: vmagent           # Переопределение полного имени ресурсов

# Аннотации
annotations:
  configmap.reloader.stakater.com/reload: vmagent-config  # Автоматическая перезагрузка при изменении ConfigMap

# Дополнительные аргументы командной строки
extraArgs:
  promscrape.cluster.memberLabel: vmagent_instance  # Метка для идентификации экземпляров в кластере

# Ограничения ресурсов
resources:
  limits:
    cpu: 100m                      # Максимальное количество CPU (0.1 ядра)
    memory: 200Mi                  # Максимальный объем памяти
  requests:
    cpu: 20m                       # Гарантированное количество CPU (0.02 ядра)
    memory: 100Mi                  # Гарантированный объем памяти

# Монтирование дополнительных томов
extraVolumeMounts:
- name: etcd-tls-volume            # Том для TLS-сертификатов etcd
  mountPath: /tls/etcd-tls         # Путь монтирования
  readonly: true                   # Только для чтения
- name: ca-bundle                  # Том для CA-сертификатов
  mountPath: /etc/ssl/certs/trust-bundle.pem  # Путь монтирования
  subPath: trust-bundle.pem        # Подпуть в томе
  readOnly: true                   # Только для чтения

# Определение дополнительных томов
extraVolumes:
- name: etcd-tls-volume            # Том с TLS-сертификатами etcd
  secret:
    secretName: etcd-ca            # Имя секрета с сертификатами
- name: ca-bundle                  # Том с CA-сертификатами
  configMap:
    name: trust-ca                 # Имя ConfigMap с CA-сертификатами

# Настройки отправки метрик
remoteWrite:
  - url: "http://vminsert.monitoring.svc.cluster.local:8480/insert/0/prometheus/"  # URL для отправки метрик

# Конфигурация Service
service:
  enabled: true                    # Включение создания Service
  annotations:
    prometheus.io/scrape: "true"   # Аннотация для автоматического обнаружения Prometheus
    prometheus.io/port: "8429"     # Порт, который нужно сканировать

# Конфигурация Ingress
ingress:
  enabled: true                    # Включение Ingress
  annotations:
    cert-manager.io/cluster-issuer: ca-issuer  # Использование cert-manager для TLS
  hosts:
  - name: vmagent.dev.local        # Доменное имя
    path: /                        # Путь
    port: http                     # Порт
  tls:
  - secretName: vmagent-tls        # Имя секрета с TLS-сертификатом
    hosts:
    - vmagent.dev.local            # Домены для этого сертификата

# Политики размещения подов
affinity:
  podAntiAffinity:                 # Анти-аффинити для распределения подов
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app               # По метке app
            operator: In
            values: [vmagent]
        topologyKey: kubernetes.io/hostname  # Размещать на разных нодах

# Настройки постоянного хранилища
persistence:
  enabled: true                    # Включение PersistentVolume
  size: 1Gi                       # Размер тома
  storageClassName: longhorn-data  # Класс хранилища

# Основная конфигурация сбора метрик
config:
  global:
    scrape_interval: 10s          # Интервал сбора метрик по умолчанию

  # Список конфигураций сбора метрик
  scrape_configs:
  # Конфигурация для сбора метрик etcd
  - job_name: etcd
    honor_labels: true             # Не перезаписывать оригинальные метки
    kubernetes_sd_configs:
    - role: pod                    # Обнаружение через Kubernetes Pods
      namespaces:
        names:
        - kube-system              # Только в namespace kube-system
    scheme: https                  # Использовать HTTPS
    tls_config:                    # Настройки TLS
      insecure_skip_verify: true   # Не проверять сертификат
      cert_file: /tls/etcd-tls/server.crt  # Путь к сертификату
      key_file: /tls/etcd-tls/server.key    # Путь к ключу
      ca_file: /etc/ssl/certs/trust-bundle.pem  # Путь к CA
    relabel_configs:               # Правила переименования меток
    - source_labels: [__meta_kubernetes_pod_label_component]
      regex: etcd                  # Фильтр по метке component=etcd
      action: keep                 # Оставлять только etcd
    - source_labels: [__address__]
      regex: (.+?)(\\:\\d+)?       # Регулярка для адреса
      replacement: $1:2379         # Заменять порт на 2379
      action: replace
      target_label: __address__
    # Далее аналогичные правила для добавления меток
    - source_labels: [__meta_kubernetes_pod_name]
      target_label: pod
    - source_labels: [__meta_kubernetes_pod_container_name]
      target_label: container
    - source_labels: [__meta_kubernetes_namespace]
      target_label: namespace
    - source_labels: [__meta_kubernetes_pod_node_name]
      target_label: node

  # Конфигурация для сбора метрик kube-apiserver
  - job_name: apiserver
    kubernetes_sd_configs:
    - role: endpoints
      namespaces:
        names:
        - default
    scheme: https
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    relabel_configs:
    - action: keep
      source_labels: [ __meta_kubernetes_service_label_component ]
      regex: apiserver
    - action: keep
      source_labels: [ __meta_kubernetes_endpoint_port_name ]
      regex: https
    - source_labels: [ __meta_kubernetes_pod_node_name ]
      target_label: node
    - source_labels: [ __meta_kubernetes_namespace ]
      target_label: namespace
    - source_labels: [ __meta_kubernetes_service_name ]
      target_label: service
    - source_labels: [ __meta_kubernetes_pod_name ]
      target_label: pod
    - target_label: endpoint
      replacement: https

  # Конфигурация для сбора метрик kubelet
  - job_name: kubelet
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
    - role: node
    relabel_configs:
    - replacement: kubernetes.default.svc:443
      target_label: __address__
    - regex: (.+)
      replacement: /api/v1/nodes/$1/proxy/metrics
      source_labels:
      - __meta_kubernetes_node_name
      target_label: __metrics_path__
    - source_labels: [ __meta_kubernetes_node_name ]
      target_label: node

  # Конфигурация для сбора метрик cAdvisor
  - job_name: cadvisor
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    honor_timestamps: false
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    kubernetes_sd_configs:
    - role: node
    relabel_configs:
    - target_label: __address__
      replacement: kubernetes.default.svc:443
    - source_labels: [ __meta_kubernetes_node_name ]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
    - target_label: job
      replacement: cadvisor
    - source_labels: [ __meta_kubernetes_node_name ]
      target_label: node
    metric_relabel_configs:
    - action: drop
      source_labels: [ __name__ ]
      regex: container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)
    - action: drop
      source_labels: [ __name__ ]
      regex: container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)
    - action: drop
      source_labels: [ __name__ ]
      regex: container_memory_(mapped_file|swap)
    - action: drop
      source_labels: [ __name__ ]
      regex: container_(file_descriptors|tasks_state|threads_max)
    - action: drop
      source_labels: [ __name__ ]
      regex: container_spec.*
    - action: drop
      source_labels: [ id, pod ]
      regex: .+;

  # Остальные конфигурации (kube-proxy, kube-controller-manager, kube-scheduler, Calico, 
  # kube-state-metrics, node-exporter) имеют аналогичную структуру с небольшими вариациями
  # в зависимости от особенностей каждого компонента

  # Конфигурация для сбора метрик kube-proxy
  - job_name: kube-proxy
    honor_labels: true
    kubernetes_sd_configs:
    - role: pod
      namespaces:
        names:
        - kube-system
    relabel_configs:
    - source_labels: [ __meta_kubernetes_pod_label_k8s_app ]
      regex: kube-proxy
      action: keep
    - source_labels:
      - __address__
      regex: (.+?)(\\:\\d+)?
      replacement: $1:10249
      action: replace
      target_label: __address__
    - source_labels:
      - __meta_kubernetes_pod_name
      target_label: pod
    - source_labels:
      - __meta_kubernetes_pod_container_name
      target_label: container
    - source_labels:
      - __meta_kubernetes_namespace
      target_label: namespace
    - source_labels:
      - __meta_kubernetes_pod_node_name
      target_label: node

  # Конфигурация для сбора метрик kube-controller-manager
  - job_name: kube-controller-manager
    honor_labels: true
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
    - role: pod
      namespaces:
        names:
        - kube-system
    relabel_configs:
    - source_labels: [ __meta_kubernetes_pod_label_component ]
      regex: kube-controller-manager
      action: keep
    - source_labels:
      - __address__
      regex: (.+?)(\\:\\d+)?
      replacement: $1:10257
      action: replace
      target_label: __address__
    - source_labels:
      - __meta_kubernetes_pod_name
      target_label: pod
    - source_labels:
      - __meta_kubernetes_pod_container_name
      target_label: container
    - source_labels:
      - __meta_kubernetes_namespace
      target_label: namespace
    - source_labels:
      - __meta_kubernetes_pod_node_name
      target_label: node

  # Конфигурация для сбора метрик kube-scheduler
  - job_name: kube-scheduler
    honor_labels: true
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      insecure_skip_verify: true
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    kubernetes_sd_configs:
    - role: pod
      namespaces:
        names:
        - kube-system
    relabel_configs:
    - source_labels: [ __meta_kubernetes_pod_label_component ]
      regex: kube-scheduler
      action: keep
    - source_labels:
      - __address__
      regex: (.+?)(\\:\\d+)?
      replacement: $1:10259
      action: replace
      target_label: __address__
    - source_labels:
      - __meta_kubernetes_pod_name
      target_label: pod
    - source_labels:
      - __meta_kubernetes_pod_container_name
      target_label: container
    - source_labels:
      - __meta_kubernetes_namespace
      target_label: namespace
    - source_labels:
      - __meta_kubernetes_pod_node_name
      target_label: node


  # Конфигурация для сбора метрик calico
  - job_name: calico
    scheme: http
    kubernetes_sd_configs:
    - role: endpoints
    relabel_configs:
    - source_labels: [ __meta_kubernetes_service_name ]
      regex:
      - calico-felix-metrics
      - calico-typha-metrics
      - calico-kube-controllers-metrics
      action: keep
    - source_labels: [ __meta_kubernetes_pod_container_port_name ]
      regex: calico-typha
      action: drop
    - source_labels: [ __meta_kubernetes_pod_node_name ]
      target_label: node
    - source_labels: [ __meta_kubernetes_namespace ]
      target_label: namespace
    - source_labels: [ __meta_kubernetes_service_name ]
      target_label: service
    - source_labels: [ __meta_kubernetes_pod_name ]
      target_label: pod
    - source_labels: [ __meta_kubernetes_pod_container_name ]
      target_label: container
    - source_labels: [ __meta_kubernetes_service_name ]
      target_label: job

   # Конфигурация для сбора метрик kube-state-metrics
  - job_name: kube-state-metrics
    honor_labels: true
    kubernetes_sd_configs:
    - role: endpoints
      namespaces:
        names:
        - monitoring
    relabel_configs:
    - source_labels: [ __meta_kubernetes_service_label_app_kubernetes_io_name ]
      regex: kube-state-metrics
      action: keep
    - action: keep
      source_labels: [ __meta_kubernetes_endpoint_port_name ]
      regex: http
    - source_labels: [ __meta_kubernetes_pod_node_name ]
      target_label: node
    - source_labels: [ __meta_kubernetes_namespace ]
      target_label: namespace
    - source_labels: [ __meta_kubernetes_service_name ]
      target_label: service
    - source_labels: [ __meta_kubernetes_pod_name ]
      target_label: pod
    - source_labels: [ __meta_kubernetes_pod_container_name ]
      target_label: container
    - source_labels: [ __meta_kubernetes_service_name ]
      target_label: job

   # Конфигурация для сбора метрик node-exporte
  - job_name: node-exporter
    honor_labels: true
    kubernetes_sd_configs:
    - role: endpoints
      namespaces:
        names:
        - monitoring
    relabel_configs:
    - source_labels: [ __meta_kubernetes_service_label_app_kubernetes_io_name ]
      regex: node-exporter
      action: keep
    - action: keep
      source_labels: [ __meta_kubernetes_endpoint_port_name ]
      regex: metrics
    - source_labels: [ __meta_kubernetes_pod_name ]
      target_label: pod
    - source_labels: [ __meta_kubernetes_pod_container_name ]
      target_label: container
    - source_labels: [ __meta_kubernetes_namespace ]
      target_label: namespace
    - source_labels: [ __meta_kubernetes_service_name ]
      target_label: service
    - source_labels: [ __meta_kubernetes_service_name ]
      target_label: job
    - source_labels: [ __meta_kubernetes_endpoint_node_name ]
      target_label: node

  # Autodiscover endpoint with annotaions
  - job_name: kubernetes-endpoints
    kubernetes_sd_configs:
    - role: endpoints
    relabel_configs:
    - action: drop
      source_labels: [ __meta_kubernetes_pod_container_init ]
      regex: "true"
    - action: keep_if_equal
      source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_port, __meta_kubernetes_pod_container_port_number ]
    - action: keep
      source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scrape ]
      regex: "true"
    - action: replace
      source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_scheme ]
      target_label: __scheme__
      regex: (https?)
    - action: replace
      source_labels: [ __meta_kubernetes_service_annotation_prometheus_io_path ]
      target_label: __metrics_path__
      regex: (.+)
    - action: replace
      source_labels: [ __address__, __meta_kubernetes_service_annotation_prometheus_io_port ]
      target_label: __address__
      regex: ([^:]+)(?::\d+)?;(\d+)
      replacement: $1:$2
    - source_labels: [ __meta_kubernetes_pod_name ]
      target_label: pod
    - source_labels: [ __meta_kubernetes_pod_container_name ]
      target_label: container
    - source_labels: [ __meta_kubernetes_namespace ]
      target_label: namespace
    - source_labels: [ __meta_kubernetes_pod_node_name ]
      target_label: node
    - source_labels: [ __meta_kubernetes_service_name ]
      target_label: job
    - source_labels: [ __meta_kubernetes_service_name ]
      target_label: service

  # Autodiscover pod with annotaions
  - job_name: "kubernetes-pods"
    kubernetes_sd_configs:
    - role: pod
    relabel_configs:
    - action: drop
      source_labels: [ __meta_kubernetes_pod_container_init ]
      regex: true
    - action: keep_if_equal
      source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_container_port_number ]
    - source_labels:
      - __meta_kubernetes_pod_annotation_prometheus_io_scheme
      action: replace
      regex: (https?)
      target_label: __scheme__
    - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_scrape ]
      action: keep
      regex: true
    - source_labels: [ __meta_kubernetes_pod_annotation_prometheus_io_path ]
      action: replace
      target_label: __metrics_path__
      regex: (.+)
    - source_labels: [ __address__, __meta_kubernetes_pod_annotation_prometheus_io_port ]
      action: replace
      regex: ([^:]+)(?::\d+)?;(\d+)
      replacement: $1:$2
      target_label: __address__
    - source_labels: [ __meta_kubernetes_pod_name ]
      target_label: pod
    - source_labels: [ __meta_kubernetes_pod_container_name ]
      target_label: container
    - source_labels: [ __meta_kubernetes_namespace ]
      target_label: namespace
    - source_labels: [ __meta_kubernetes_pod_node_name ]
      target_label: node
    - source_labels: [ __meta_kubernetes_pod_label_app ]
      target_label: job
